/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/router';
import '@stencil/state-tunnel';
import {
  Enseingnant,
} from './global/enseignant';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';


export namespace Components {

  interface SpiCandidat {
    'enseignant': Enseingnant;
    'load': () => void;
    'name': string;
  }
  interface SpiCandidatAttributes extends StencilHTMLAttributes {
    'enseignant'?: Enseingnant;
    'name'?: string;
  }

  interface EnseignantAjouter {
    'home': RouterHistory;
  }
  interface EnseignantAjouterAttributes extends StencilHTMLAttributes {
    'home'?: RouterHistory;
  }

  interface EnseignantDetails {
    'match': MatchResults;
  }
  interface EnseignantDetailsAttributes extends StencilHTMLAttributes {
    'match'?: MatchResults;
  }

  interface EnseignantListe {
    'load': () => void;
  }
  interface EnseignantListeAttributes extends StencilHTMLAttributes {}

  interface EnseignantModifier {
    'match': MatchResults;
    'nom': string;
  }
  interface EnseignantModifierAttributes extends StencilHTMLAttributes {
    'match'?: MatchResults;
    'nom'?: string;
  }

  interface EnseignantName {}
  interface EnseignantNameAttributes extends StencilHTMLAttributes {}

  interface EnseignantSupprimer {
    'history': RouterHistory;
    'match': MatchResults;
  }
  interface EnseignantSupprimerAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
    'match'?: MatchResults;
  }

  interface FormationAjouter {
    'home': RouterHistory;
  }
  interface FormationAjouterAttributes extends StencilHTMLAttributes {
    'home'?: RouterHistory;
  }

  interface FormationDetails {
    'back': RouterHistory;
    'match': MatchResults;
  }
  interface FormationDetailsAttributes extends StencilHTMLAttributes {
    'back'?: RouterHistory;
    'match'?: MatchResults;
  }

  interface FormationListe {
    'load': () => void;
  }
  interface FormationListeAttributes extends StencilHTMLAttributes {}

  interface SpiHeader {}
  interface SpiHeaderAttributes extends StencilHTMLAttributes {}

  interface SpiHome {}
  interface SpiHomeAttributes extends StencilHTMLAttributes {}

  interface SpiRoot {}
  interface SpiRootAttributes extends StencilHTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'SpiCandidat': Components.SpiCandidat;
    'EnseignantAjouter': Components.EnseignantAjouter;
    'EnseignantDetails': Components.EnseignantDetails;
    'EnseignantListe': Components.EnseignantListe;
    'EnseignantModifier': Components.EnseignantModifier;
    'EnseignantName': Components.EnseignantName;
    'EnseignantSupprimer': Components.EnseignantSupprimer;
    'FormationAjouter': Components.FormationAjouter;
    'FormationDetails': Components.FormationDetails;
    'FormationListe': Components.FormationListe;
    'SpiHeader': Components.SpiHeader;
    'SpiHome': Components.SpiHome;
    'SpiRoot': Components.SpiRoot;
  }

  interface StencilIntrinsicElements {
    'spi-candidat': Components.SpiCandidatAttributes;
    'enseignant-ajouter': Components.EnseignantAjouterAttributes;
    'enseignant-details': Components.EnseignantDetailsAttributes;
    'enseignant-liste': Components.EnseignantListeAttributes;
    'enseignant-modifier': Components.EnseignantModifierAttributes;
    'enseignant-name': Components.EnseignantNameAttributes;
    'enseignant-supprimer': Components.EnseignantSupprimerAttributes;
    'formation-ajouter': Components.FormationAjouterAttributes;
    'formation-details': Components.FormationDetailsAttributes;
    'formation-liste': Components.FormationListeAttributes;
    'spi-header': Components.SpiHeaderAttributes;
    'spi-home': Components.SpiHomeAttributes;
    'spi-root': Components.SpiRootAttributes;
  }


  interface HTMLSpiCandidatElement extends Components.SpiCandidat, HTMLStencilElement {}
  var HTMLSpiCandidatElement: {
    prototype: HTMLSpiCandidatElement;
    new (): HTMLSpiCandidatElement;
  };

  interface HTMLEnseignantAjouterElement extends Components.EnseignantAjouter, HTMLStencilElement {}
  var HTMLEnseignantAjouterElement: {
    prototype: HTMLEnseignantAjouterElement;
    new (): HTMLEnseignantAjouterElement;
  };

  interface HTMLEnseignantDetailsElement extends Components.EnseignantDetails, HTMLStencilElement {}
  var HTMLEnseignantDetailsElement: {
    prototype: HTMLEnseignantDetailsElement;
    new (): HTMLEnseignantDetailsElement;
  };

  interface HTMLEnseignantListeElement extends Components.EnseignantListe, HTMLStencilElement {}
  var HTMLEnseignantListeElement: {
    prototype: HTMLEnseignantListeElement;
    new (): HTMLEnseignantListeElement;
  };

  interface HTMLEnseignantModifierElement extends Components.EnseignantModifier, HTMLStencilElement {}
  var HTMLEnseignantModifierElement: {
    prototype: HTMLEnseignantModifierElement;
    new (): HTMLEnseignantModifierElement;
  };

  interface HTMLEnseignantNameElement extends Components.EnseignantName, HTMLStencilElement {}
  var HTMLEnseignantNameElement: {
    prototype: HTMLEnseignantNameElement;
    new (): HTMLEnseignantNameElement;
  };

  interface HTMLEnseignantSupprimerElement extends Components.EnseignantSupprimer, HTMLStencilElement {}
  var HTMLEnseignantSupprimerElement: {
    prototype: HTMLEnseignantSupprimerElement;
    new (): HTMLEnseignantSupprimerElement;
  };

  interface HTMLFormationAjouterElement extends Components.FormationAjouter, HTMLStencilElement {}
  var HTMLFormationAjouterElement: {
    prototype: HTMLFormationAjouterElement;
    new (): HTMLFormationAjouterElement;
  };

  interface HTMLFormationDetailsElement extends Components.FormationDetails, HTMLStencilElement {}
  var HTMLFormationDetailsElement: {
    prototype: HTMLFormationDetailsElement;
    new (): HTMLFormationDetailsElement;
  };

  interface HTMLFormationListeElement extends Components.FormationListe, HTMLStencilElement {}
  var HTMLFormationListeElement: {
    prototype: HTMLFormationListeElement;
    new (): HTMLFormationListeElement;
  };

  interface HTMLSpiHeaderElement extends Components.SpiHeader, HTMLStencilElement {}
  var HTMLSpiHeaderElement: {
    prototype: HTMLSpiHeaderElement;
    new (): HTMLSpiHeaderElement;
  };

  interface HTMLSpiHomeElement extends Components.SpiHome, HTMLStencilElement {}
  var HTMLSpiHomeElement: {
    prototype: HTMLSpiHomeElement;
    new (): HTMLSpiHomeElement;
  };

  interface HTMLSpiRootElement extends Components.SpiRoot, HTMLStencilElement {}
  var HTMLSpiRootElement: {
    prototype: HTMLSpiRootElement;
    new (): HTMLSpiRootElement;
  };

  interface HTMLElementTagNameMap {
    'spi-candidat': HTMLSpiCandidatElement
    'enseignant-ajouter': HTMLEnseignantAjouterElement
    'enseignant-details': HTMLEnseignantDetailsElement
    'enseignant-liste': HTMLEnseignantListeElement
    'enseignant-modifier': HTMLEnseignantModifierElement
    'enseignant-name': HTMLEnseignantNameElement
    'enseignant-supprimer': HTMLEnseignantSupprimerElement
    'formation-ajouter': HTMLFormationAjouterElement
    'formation-details': HTMLFormationDetailsElement
    'formation-liste': HTMLFormationListeElement
    'spi-header': HTMLSpiHeaderElement
    'spi-home': HTMLSpiHomeElement
    'spi-root': HTMLSpiRootElement
  }

  interface ElementTagNameMap {
    'spi-candidat': HTMLSpiCandidatElement;
    'enseignant-ajouter': HTMLEnseignantAjouterElement;
    'enseignant-details': HTMLEnseignantDetailsElement;
    'enseignant-liste': HTMLEnseignantListeElement;
    'enseignant-modifier': HTMLEnseignantModifierElement;
    'enseignant-name': HTMLEnseignantNameElement;
    'enseignant-supprimer': HTMLEnseignantSupprimerElement;
    'formation-ajouter': HTMLFormationAjouterElement;
    'formation-details': HTMLFormationDetailsElement;
    'formation-liste': HTMLFormationListeElement;
    'spi-header': HTMLSpiHeaderElement;
    'spi-home': HTMLSpiHomeElement;
    'spi-root': HTMLSpiRootElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
